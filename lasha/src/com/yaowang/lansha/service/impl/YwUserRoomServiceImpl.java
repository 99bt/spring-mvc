package com.yaowang.lansha.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import com.yaowang.lansha.dao.YwUserRoomHotDao;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Service;import com.yaowang.common.constant.BaseConstant;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.common.constant.LanshaConstant;import com.yaowang.lansha.dao.YwUserRoomDao;import com.yaowang.lansha.entity.LanshaLiveHistory;import com.yaowang.lansha.entity.YwBanner;import com.yaowang.lansha.entity.YwGame;import com.yaowang.lansha.entity.YwUser;import com.yaowang.lansha.entity.YwUserRoom;import com.yaowang.lansha.entity.YwUserRoomHot;import com.yaowang.lansha.service.LanshaLiveHistoryService;import com.yaowang.lansha.service.YwGameService;import com.yaowang.lansha.service.YwUserRoomHotService;import com.yaowang.lansha.service.YwUserRoomService;import com.yaowang.lansha.service.YwUserService;import com.yaowang.service.impl.SysOptionServiceImpl;import com.yaowang.util.asynchronous.AsynchronousService;import com.yaowang.util.asynchronous.ObjectCallable;import com.yaowang.util.openfire.OpenFireConstant;import com.yaowang.util.openfire.http.MessageTool;import com.yaowang.util.openfire.http.RoomTool;import com.yaowang.util.ws.WsLiveUtil;/** * yw_user_room  * @author  *  */@Service("ywUserRoomService")public class YwUserRoomServiceImpl implements YwUserRoomService{	@Resource	private YwUserRoomDao ywUserRoomDao;	@Resource	private YwUserService ywUserService;	@Resource	private YwGameService ywGameService;    @Resource    private YwUserRoomHotDao ywUserRoomHotDao;	@Resource	private YwUserRoomHotService ywUserRoomHotService;	@Resource	private LanshaLiveHistoryService lanshaLiveHistoryService;		@Override	public YwUserRoom save(YwUserRoom entity){		if (entity.getUpdateTime() == null) {			entity.setUpdateTime(new Date());		}		//保存房间		ywUserRoomDao.save(entity);				while(true){			//随机直播码			Integer tempRoomId =  (int)(Math.random()*10000);			entity.setRoomId(YwUserRoom.LIVE + tempRoomId);			//判断是否重复			YwUserRoom temp = getYwUserRoomByRoomId(entity.getRoomId());			if(temp == null){				break;			}		}		entity.setRtmp(SysOptionServiceImpl.getValue("FMS.RTMP"));		entity.setWsHost(SysOptionServiceImpl.getValue("FMS.RTMP.SHOW"));		entity.setLiveHost(SysOptionServiceImpl.getValue("FMS.RTMP.LIVE"));		//创建直播聊天室		entity.setOpenfireRoom(YwUserRoom.LIVE + entity.getIdInt());		entity.setOpenfirePath(OpenFireConstant.IP);		entity.setOpenfirePort(OpenFireConstant.PORT.toString());		entity.setOpenfireConference(OpenFireConstant.CONFERENCE);				//将房间同步Openfire//		RoomXmppUtil.createRoom(OpenFireConstant.ADMIN_NAME, entity.getOpenfireRoom(), entity.getOpenfireConference());		RoomTool.createRoom(entity.getOpenfirePath(), entity.getOpenfireRoom(), entity.getOpenfireConference());		if(entity.getOnline() == null){			entity.setOnline(LanshaConstant.ROOM_STATUS_OFFLINE);		}		// 修改房间信息		ywUserRoomDao.update(entity);				return entity;	}		@Override	public Integer delete(String[] ids){		//修改房间主播用户状态//		Map<String, YwUserRoom> roomMap = ywUserRoomDao.getYwUserRoomMapByIds(ids);				return ywUserRoomDao.delete(ids);	}		@Override	public Integer update(YwUserRoom entity){		//取未更新前的主播//		YwUserRoom room = ywUserRoomDao.getYwUserRoomById(entity.getId());				return ywUserRoomDao.update(entity);	}		@Override	public int updateState(YwUserRoom room, LanshaLiveHistory liveHistory) {		if(liveHistory != null){			if("1".equals(liveHistory.getType())){				// 新增				lanshaLiveHistoryService.save(liveHistory);			}else if("2".equals(liveHistory.getType())){				// 修改				lanshaLiveHistoryService.update(liveHistory);			}		}		callIM(room.getId(), room, room.getOnline());		return ywUserRoomDao.updateState(room);	}		@Override	public YwUserRoom getYwUserRoomById(String id){		return ywUserRoomDao.getYwUserRoomById(id);	}		@Override	public YwUserRoom getYwUserRoomByUid(String uid){		return ywUserRoomDao.getYwUserRoomByUid(uid);	}		@Override	public YwUserRoom getYwUserRoomByRoomId(String roomId) {		return ywUserRoomDao.getYwUserRoomByRoomId(roomId);	}		@Override	public Map<String, YwUserRoom> getYwUserRoomMapByIds(String[] ids){		return ywUserRoomDao.getYwUserRoomMapByIds(ids);	}		@Override	public Map<String, YwUserRoom> getYwUserRoomMapByIdInts(String[] idInts, Integer status){		return ywUserRoomDao.getYwUserRoomMapByIdInts(idInts, status);	}		@Override	public List<YwUserRoom> getYwUserRoomList(YwUserRoom room){		return ywUserRoomDao.getYwUserRoomList(room);	}		@Override	public List<YwUserRoom> getYwUserRoomList(YwUserRoom room, String[] uids, PageDto page, Boolean isBan, Boolean isShow){		if (room != null) {			// 主播、游戏名称搜索			if (StringUtils.isNotBlank(room.getGameName())) {				YwGame game = new YwGame();				game.setName(room.getGameName());				game.setStatus(LanshaConstant.STATUS_ONLINE);				List<YwGame> listGame = ywGameService.getYwGamePage(game, null, null, null, null, null);				if (CollectionUtils.isNotEmpty(listGame)) {					Set<String> gameIds = new HashSet<String>();					for (YwGame ywGame : listGame) {						gameIds.add(ywGame.getId());					}					room.setGameIds(gameIds);				} else {					return new ArrayList<YwUserRoom>();				}			}			Set<String> userIds = new HashSet<String>();			if (StringUtils.isNotBlank(room.getUsername())) {				YwUser users = new YwUser();				users.setUsername(room.getUsername());				List<YwUser> listUser = ywUserService.getYwUserList(users, null, null, null, null, null);				if (CollectionUtils.isNotEmpty(listUser)) {					for (YwUser ywUser : listUser) {						userIds.add(ywUser.getId());					}				} else {					return new ArrayList<YwUserRoom>();				}			}			if (StringUtils.isNotBlank(room.getNickname())) {				YwUser users = new YwUser();				users.setNickname(room.getNickname());				List<YwUser> listUser = ywUserService.getYwUserList(users, null, null, null, null, null);				if (CollectionUtils.isNotEmpty(listUser)) {					for (YwUser ywUser : listUser) {						userIds.add(ywUser.getId());					}				} else {					return new ArrayList<YwUserRoom>();				}			}			if(CollectionUtils.isNotEmpty(userIds)){				uids = userIds.toArray(new String[] {});			}		}		return ywUserRoomDao.getYwUserRoomList(room, uids, page, isBan, isShow);	}	@Override	public void updateBySql(String[] ids, Integer status,String remarks) {		for (String id : ids) {			callIM(id, null, status);		}		ywUserRoomDao.updateBySql(ids, status,remarks);        //删除热门房间        ywUserRoomHotDao.delete(ids);	}	/**	 * 发送im消息	 * @param id	 * @param status	 */	private void callIM(String id, YwUserRoom room, final Integer status){		// 指令		String type = null;		if (status == 1) {			//开播			type = "1";		}else if (status == 0) {			//停播			type = "2";		}else if (status == 2) {			//禁播			type = "3";		}				if (StringUtils.isNotBlank(type)) {			//发送IM指令消息			if (room == null) {				room = getYwUserRoomById(id);			}			//发送im指令			MessageTool.sendRoomMessage(room.getOpenfirePath(), room.getOpenfireRoom(), room.getOpenfireConference(), type);			//发送网宿流指令			ObjectCallable callable = new ObjectCallable() {				@Override				public Object run() throws Exception {					YwUserRoom room = (YwUserRoom)getData();					if (room.getOnline() == LanshaConstant.ROOM_STATUS_BANNED && status != 2) {						//发送取消禁播指令						try {							WsLiveUtil.liveOpenUtil(room.getRtmp() + room.getRoomId());						} catch (Exception e) {							e.printStackTrace();						}					}else if (room.getOnline() != LanshaConstant.ROOM_STATUS_BANNED && status == 2) {						//发送禁播指令						try {							WsLiveUtil.liveCloseUtil(room.getRtmp() + room.getRoomId());						} catch (Exception e) {							e.printStackTrace();						}					}					return null;				}			};			callable.setData(room);			AsynchronousService.submit(callable);		}	}	@Override	public Map<Integer, YwUserRoom> getYwUserRoomMapByUIds(String[] uids) {		return ywUserRoomDao.getYwUserRoomMapByUIds(uids);	}	@Override	public int updateOrderId(List<YwUserRoom> list) {		int count = 0;		Set<String> names = new HashSet<String>();		names.add("orderId");		names.add("id");				return count;	}		@Override	public Integer updateByRoomId(YwUserRoom room) {		return ywUserRoomDao.updateByRoomId(room);	}		@Override	public Integer updateLiveImgByRoomId(YwUserRoom room) {		return ywUserRoomDao.updateLiveImgByRoomId(room);	}		@Override	public Integer updateReset(Date date) {		return ywUserRoomDao.updateReset(date);	}	@Override	public void setUserName(List<YwUserRoom> list) {		if(CollectionUtils.isNotEmpty(list)){			Set<String> ids = new HashSet<String>();			for(YwUserRoom room : list){				ids.add(room.getUid());			}			Map<String, YwUser> map = ywUserService.getYwUserMapByIds(ids.toArray(new String[]{}));			for(YwUserRoom room : list){				if(map.containsKey(room.getUid())){					YwUser users = map.get(room.getUid());					room.setNickname(users.getNickname());					room.setUserIcon(users.getHeadpic());					room.setUsername(users.getUsername());				}			}		}	}	@Override	public void setGameName(List<YwUserRoom> list) {		if(CollectionUtils.isNotEmpty(list)){			Set<String> ids = new HashSet<String>();			for(YwUserRoom room : list){				ids.add(room.getGameId());			}			Map<String, YwGame> map = ywGameService.getYwGameMapByIds(ids.toArray(new String[]{}));			for(YwUserRoom room : list){				if(map.containsKey(room.getGameId())){					room.setGameName(map.get(room.getGameId()).getName());				}			}		}	}	@Override	public List<Map<String, Object>> getListMapRoomInfo(String name, List<Integer> listInStatus) {		return ywUserRoomDao.getListMapRoomInfo(name, listInStatus);	}	@Override	public List<YwUserRoom> listYwUserRoomList(YwUserRoom entity, String[] ids) {		return ywUserRoomDao.listYwUserRoomList(entity, ids);	}	@Override	public void setIsHotRoom(List<YwUserRoom> list) {		if(CollectionUtils.isNotEmpty(list)){			Set<String> roomIds = new HashSet<String>();			for (YwUserRoom ywUserRoom : list) {				roomIds.add(ywUserRoom.getId());			}			Map<String, YwUserRoomHot> mapRoomHot = ywUserRoomHotService.getMapUserRoomHotByRoomIds(roomIds.toArray(new String[] {}));			for (YwUserRoom ywUserRoom : list) {				ywUserRoom.setIsHotRoom(BaseConstant.NO);				if(mapRoomHot.containsKey(ywUserRoom.getId())){					ywUserRoom.setIsHotRoom(BaseConstant.YES);				}			}		}	}	@Override	public YwUserRoom getYwUserRoomById(int idInt) {		return ywUserRoomDao.getYwUserRoomById(idInt);	}		@Override	public List<YwUserRoom> getAllLiveListByRoome(YwUserRoom entity, PageDto page, String[] ids){		return ywUserRoomDao.getAllLiveListByRoome(entity, page, ids);	}	@Override	public void setData(List<YwUserRoom> list , boolean flag) {		if(CollectionUtils.isEmpty(list)){			return;		}		Set<String> ids = new HashSet<String>();		Set<String> ods = new HashSet<String>();		for(YwUserRoom ywUserRoom : list){			ids.add(ywUserRoom.getUid());			ods.add(ywUserRoom.getGameId());		}		Map<String, YwUser> m = ywUserService.getYwUserMapByIds(ids.toArray(new String[]{}));		Map<String, YwGame> map = ywGameService.getYwGameMapByIds(ods.toArray(new String[]{}));		List<YwUserRoom> removeList = new ArrayList<YwUserRoom>();		for(YwUserRoom ywUserRoom : list){			if(null == m.get(ywUserRoom.getUid())){        	      removeList.add(ywUserRoom);	              continue;			}			if(flag){			          if(!m.containsKey(ywUserRoom.getUid())){			          	      removeList.add(ywUserRoom);			 	              continue;			          }		    }			ywUserRoom.setNickname(m.get(ywUserRoom.getUid()).getNickname());			ywUserRoom.setGameName(map.get(ywUserRoom.getGameId()) == null ? "" : map.get(ywUserRoom.getGameId()).getName());			ywUserRoom.setUserIcon(m.get(ywUserRoom.getUid()).getHeadpic());		}		if(!removeList.isEmpty()){			list.removeAll(removeList);		}			}		@Override	public List<YwUserRoom> getYwUserRoomByIds(String[] ids, PageDto page) {		return ywUserRoomDao.getYwUserRoomByIds(ids, page);	}	@Override	public Integer getRoomCount() {		return ywUserRoomDao.getRoomCount();	}	@Override	public int updateRoomId(String id, String roomId) {		// TODO Auto-generated method stub		return ywUserRoomDao.updateRoomId( id,  roomId);	}	@Override	public List<YwUserRoom> getYwUserRoomIsHot(YwUserRoom entity, PageDto page) {		return ywUserRoomDao.getYwUserRoomIsHot(entity, page);	}	@Override	public void setName(List<Map<String, Object>> listMapData) {		if(CollectionUtils.isNotEmpty(listMapData)){			Set<String> uids = new HashSet<String>();			Set<String> gameIds = new HashSet<String>();			for(Map<String, Object> map : listMapData){				uids.add(map.get("uid").toString());				gameIds.add(map.get("gameId").toString());			}			Map<String, YwUser> mapUser = ywUserService.getYwUserMapByIds(uids.toArray(new String[]{}));			Map<String, YwGame> mapGame = ywGameService.getYwGameMapByIds(gameIds.toArray(new String[]{}));			for(Map<String, Object> map : listMapData){				String uid = map.get("uid").toString();				String gameId = map.get("gameId").toString();				if(mapUser.containsKey(uid)){					YwUser users = mapUser.get(uid);					map.put("nickname", users.getNickname());					map.put("username", users.getUsername());				}				if(mapGame.containsKey(gameId)){					map.put("gameName", mapGame.get(gameId).getName());				}			}		}	}	@Override	public List<Map<String, Object>> getBannerUserRoom(YwBanner ywBanner, Integer online, PageDto page) {		return ywUserRoomDao.getBannerUserRoom(ywBanner, online, page);	}	@Override	public Map<String, YwUserRoom> getYwUserRoomMapByUserIds(String[] userIds) {		return ywUserRoomDao.getYwUserRoomMapByUserIds(userIds);	}	@Override	public List<YwUserRoom> getYwUserRoomByNickName(String name) {		if(StringUtils.isBlank(name)){			return new ArrayList<YwUserRoom>(0);		}		return ywUserRoomDao.getYwUserRoomByNickName(name,null);	}    @Override    public List<Map<String, Object>> getByRoomIdint(Integer id) {        return ywUserRoomDao.getByRoomIdint(id);    }    @Override    public Integer updateSignByIDInts(Integer status,String[] ids) {        return ywUserRoomDao.updateSignByIDInts(status,ids);  //To change body of implemented methods use File | Settings | File Templates.    }	@Override	public Integer updateBasenum(String[] ids, Integer num) {		return ywUserRoomDao.updateRoomNumber(0,ids,num);	}	@Override	public Integer updateMultiplenum(String[] ids, Integer num) {		return ywUserRoomDao.updateRoomNumber(1,ids,num);	}	@Override	public List<YwUserRoom> doSearch(String name, PageDto page) {		YwGame game = new YwGame();		game.setName(name);		game.setStatus(LanshaConstant.STATUS_ONLINE);		List<YwGame> listGame = ywGameService.getYwGamePage(game, null, null, null, null, null);		List<Map<String, Object>> listUser = ywUserService.getListMapAnchor(name,LanshaConstant.USER_TYPE_ANCHOR,null);		return ywUserRoomDao.findByKeyword(name,listGame,listUser,page);	}	@Override	public Integer getDoSearchCount(String name) {		YwGame game = new YwGame();		game.setName(name);		game.setStatus(LanshaConstant.STATUS_ONLINE);		List<YwGame> listGame = ywGameService.getYwGamePage(game, null, null, null, null, null);		List<Map<String, Object>> listUser = ywUserService.getListMapAnchor(name,LanshaConstant.USER_TYPE_ANCHOR,null);		return ywUserRoomDao.countFindByKeyword(name,listGame,listUser);	}	@Override	public List<YwUserRoom> getBestUserRooms(Integer type, PageDto page) {		if(null == type){			return new ArrayList<YwUserRoom>(0);		}		return ywUserRoomDao.getBestUserRooms(type,page);	}	    @Override    public void setDaShenRoom(List<YwUserRoom> list) {        if(CollectionUtils.isNotEmpty(list)){            Set<String> roomIds = new HashSet<String>();            for (YwUserRoom ywUserRoom : list) {                roomIds.add(ywUserRoom.getId());            }            Map<String, YwUserRoomHot> mapRoomHot = ywUserRoomHotDao.getMapUserRoomDaShenByRoomIds(roomIds.toArray(new String[] {}));            for (YwUserRoom ywUserRoom : list) {                ywUserRoom.setDaShen(BaseConstant.NO);                if(mapRoomHot.containsKey(ywUserRoom.getId())){                    ywUserRoom.setDaShen(BaseConstant.YES);                }            }        }    }    @Override    public void setNvShenRoom(List<YwUserRoom> list) {        if(CollectionUtils.isNotEmpty(list)){            Set<String> roomIds = new HashSet<String>();            for (YwUserRoom ywUserRoom : list) {                roomIds.add(ywUserRoom.getId());            }            Map<String, YwUserRoomHot> mapRoomHot = ywUserRoomHotDao.getMapUserRoomNvShenByRoomIds(roomIds.toArray(new String[] {}));            for (YwUserRoom ywUserRoom : list) {                ywUserRoom.setNvShen(BaseConstant.NO);                if(mapRoomHot.containsKey(ywUserRoom.getId())){                    ywUserRoom.setNvShen(BaseConstant.YES);                }            }        }    }    @Override    public Map<String, Integer> getRoomNumber() {        return ywUserRoomDao.getRoomNumber();    }    @Override    public List<YwUserRoom> getYwUserRoomList(YwUserRoom entity, PageDto page) {        return ywUserRoomDao.getAllLiveListByRoome(entity,page,null);    }	@Override	public Integer getRoomCountByGameId(String gameId) {		return ywUserRoomDao.getRoomCount(gameId);	}	@Override	public List<YwUserRoom> getBestUserRooms(Integer type, PageDto page, String gameId) {		if(null == type){			return new ArrayList<YwUserRoom>(0);		}		return ywUserRoomDao.getBestUserRooms(type,page,gameId);	}	@Override	public YwUserRoom getRandLiveFHot() {		List<YwUserRoom> rooms = ywUserRoomDao.getRoomOnlineFHot(1,null);		if(CollectionUtils.isNotEmpty(rooms)){			return rooms.get(0);		}		return null;	}	@Override	public List<String> getRandLiveFHot(int limit, String[] ids) {		List<String> roomIds = ywUserRoomDao.getRandLiveFHot(limit,ids);		return roomIds;	}	@Override	public List<YwUserRoom> getBestOnlineUserRooms(Integer type, PageDto page) {		return ywUserRoomDao.getBestUserRoomsOnline(type, page);	}		@Override	public List<YwUserRoom> getYwUserRoomIsDN(YwUserRoom entity, PageDto page) {		return ywUserRoomDao.getYwUserRoomIsDN(entity, page);	}    @Override    public List<YwUserRoom> geUserRoomsByEntity(Integer type, PageDto page) {        return ywUserRoomDao.geUserRoomsByEntity(type,page);    }	@Override	public List<YwUserRoom> getAllOnlineLiveSortByHot(Integer lanshaHotAnchor, PageDto page) {		return ywUserRoomDao.getAllOnlineLiveSortByHot(lanshaHotAnchor,page);	}}