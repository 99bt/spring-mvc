package com.yaowang.lansha.service.impl;import java.util.List;import java.util.Map;import javax.annotation.Resource;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.dao.YwUserRoomAdminDao;import com.yaowang.lansha.entity.YwUserRoom;import com.yaowang.lansha.entity.YwUserRoomAdmin;import com.yaowang.lansha.service.YwUserRoomAdminService;import com.yaowang.util.asynchronous.AsynchronousService;import com.yaowang.util.asynchronous.ObjectCallable;import com.yaowang.util.openfire.http.RoomAdminTool;import org.springframework.stereotype.Service;/** * 热门推荐房间  * @author  *  */@Service("ywUserRoomAdminService")public class YwUserRoomAdminServiceImpl implements YwUserRoomAdminService{	@Resource	private YwUserRoomAdminDao ywUserRoomAdminDao;		@Override	public YwUserRoomAdmin save(YwUserRoomAdmin entity, final YwUserRoom room){		YwUserRoomAdmin admin = ywUserRoomAdminDao.save(entity);		//通知im刷新缓存		AsynchronousService.submit(new ObjectCallable() {			@Override			public Object run() throws Exception {				RoomAdminTool.clearAdminUser(room.getOpenfirePath(), room.getOpenfireRoom());				return null;			}		});		return admin;	}		@Override	public Integer delete(String[] ids){		return ywUserRoomAdminDao.delete(ids);	}		@Override	public Integer update(YwUserRoomAdmin entity){		return ywUserRoomAdminDao.update(entity);	}		@Override	public YwUserRoomAdmin getYwUserRoomAdminById(String id){		return ywUserRoomAdminDao.getYwUserRoomAdminById(id);	}		@Override	public Map<String, YwUserRoomAdmin> getYwUserRoomAdminMapByIds(String[] ids){		return ywUserRoomAdminDao.getYwUserRoomAdminMapByIds(ids);	}		@Override	public List<YwUserRoomAdmin> getYwUserRoomAdminList(YwUserRoomAdmin entity){		return ywUserRoomAdminDao.getYwUserRoomAdminList(entity);	}		@Override	public List<YwUserRoomAdmin> getYwUserRoomAdminPage(YwUserRoomAdmin entity, PageDto page){		return ywUserRoomAdminDao.getYwUserRoomAdminPage(entity, page);	}	@Override	public void deleteRoomAdminById(final YwUserRoom room, String manageId) {		ywUserRoomAdminDao.deleteRoomAdminById(room.getId(), manageId);		//通知im刷新缓存		AsynchronousService.submit(new ObjectCallable() {			@Override			public Object run() throws Exception {				RoomAdminTool.clearAdminUser(room.getOpenfirePath(), room.getOpenfireRoom());				return null;			}		});	}	@Override	public boolean containsAdmin(String roomId, String uid) {		YwUserRoomAdmin admin = ywUserRoomAdminDao.getYwUserRoomAdminByRoomIdAndUserId(roomId,uid);		return null != admin;	}	}