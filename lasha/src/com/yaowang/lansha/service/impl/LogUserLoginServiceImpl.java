package com.yaowang.lansha.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Service;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.dao.LogUserLoginDao;import com.yaowang.lansha.entity.LogUserLogin;import com.yaowang.lansha.entity.YwUser;import com.yaowang.lansha.service.LanshaAddActivityStockService;import com.yaowang.lansha.service.LogUserLoginService;import com.yaowang.lansha.service.YwUserService;/** * log_user_login  * @author  *  */@Service("logUserLoginService")public class LogUserLoginServiceImpl implements LogUserLoginService{	@Resource	private LogUserLoginDao logUserLoginDao;	@Resource	private YwUserService ywUserService;	@Resource	private LanshaAddActivityStockService lanshaAddActivityStockService;		@Override	public LogUserLogin save(LogUserLogin entity, YwUser ywUser, String type){		if(ywUser != null && entity != null && "0".equalsIgnoreCase(entity.getLoginMethod())){			//app首次登录+5			Integer loignNumber = logUserLoginDao.getLogUserLoginCountByUserId(ywUser.getId(), null, null, "0");			if(loignNumber<1){				lanshaAddActivityStockService.addFirstMobileLogin(ywUser, type);			}		}		if ("login".equals(type)) {			//连续登录增加抽奖机会			lanshaAddActivityStockService.addLoginActivityStock(ywUser);		}		return logUserLoginDao.save(entity);	}		@Override	public Integer delete(String[] ids){		return logUserLoginDao.delete(ids);	}		@Override	public Integer update(LogUserLogin entity){		return logUserLoginDao.update(entity);	}		@Override	public LogUserLogin getLogUserLoginById(String id){		return logUserLoginDao.getLogUserLoginById(id);	}		@Override	public Map<String, LogUserLogin> getLogUserLoginMapByIds(String[] ids){		return logUserLoginDao.getLogUserLoginMapByIds(ids);	}		@Override	public List<LogUserLogin> getLogUserLoginList(){		return logUserLoginDao.getLogUserLoginList();	}		@Override	public List<LogUserLogin> getLogUserLoginPage(LogUserLogin entity, Date startTime, Date endTime, PageDto page){		if(entity != null){			if(StringUtils.isNotBlank(entity.getUserName())){				YwUser user = ywUserService.getYwusersByUsername(entity.getUserName(), true);				if(user != null){					entity.setUserId(user.getId());				}else{					return new ArrayList<LogUserLogin>();				}			}		}		List<LogUserLogin> list = logUserLoginDao.getLogUserLoginPage(entity, startTime, endTime, page);		serUserName(list);		return list;	}		public void serUserName(List<LogUserLogin> list){		if(CollectionUtils.isNotEmpty(list)){			Set<String> ids = new HashSet<String>();			for (LogUserLogin entity : list) {				ids.add(entity.getUserId());			}			//用户名			Map<String, YwUser> map = ywUserService.getYwUserMapByIds(ids.toArray(new String[]{}));			for (LogUserLogin entity : list) {				YwUser u = map.get(entity.getUserId());				entity.setUserName(u.getUsername());			}		}	}	@Override	public List<LogUserLogin> getLogUserLoginByUserId(String user_id, Date startTime, Date endTime) {		return logUserLoginDao.getLogUserLoginByUserId(user_id, startTime, endTime);	}	@Override	public Integer getLogUserLoginCountByUserId(String user_id, Date startTime,			Date endTime) {		return logUserLoginDao.getLogUserLoginCountByUserId(user_id, startTime, endTime);	}		@Override	public Integer getLogUserLoginCountByUserId(String user_id, Date startTime,			Date endTime,String loginMethod){		return logUserLoginDao.getLogUserLoginCountByUserId(user_id, startTime, endTime,loginMethod);	}}