package com.yaowang.lansha.service.impl;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import org.apache.commons.collections.CollectionUtils;import org.springframework.stereotype.Service;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.dao.YwUserRoomHotDao;import com.yaowang.lansha.entity.YwGame;import com.yaowang.lansha.entity.YwUser;import com.yaowang.lansha.entity.YwUserRoom;import com.yaowang.lansha.entity.YwUserRoomHot;import com.yaowang.lansha.service.YwGameService;import com.yaowang.lansha.service.YwUserRoomHotService;import com.yaowang.lansha.service.YwUserRoomService;import com.yaowang.lansha.service.YwUserService;/** * 热门推荐房间  * @author  *  */@Service("ywUserRoomHotService")public class YwUserRoomHotServiceImpl implements YwUserRoomHotService{	@Resource	private YwGameService ywGameService;	@Resource	private YwUserService ywUserService;	@Resource	private YwUserRoomService ywUserRoomService;	@Resource	private YwUserRoomHotDao ywUserRoomHotDao;		@Override	public YwUserRoomHot save(YwUserRoomHot entity){		return ywUserRoomHotDao.save(entity);	}		@Override	public Integer delete(String[] ids){		return ywUserRoomHotDao.delete(ids);	}		@Override	public Integer update(YwUserRoomHot entity){		return ywUserRoomHotDao.update(entity);	}		@Override	public YwUserRoomHot getYwUserRoomHotById(String id){		return ywUserRoomHotDao.getYwUserRoomHotById(id);	}		@Override	public Map<String, YwUserRoomHot> getYwUserRoomHotMapByIds(String[] ids){		return ywUserRoomHotDao.getYwUserRoomHotMapByIds(ids);	}		@Override	public List<YwUserRoomHot> getYwUserRoomHotList(YwUserRoomHot entity){		return ywUserRoomHotDao.getYwUserRoomHotList(entity);	}		@Override	public List<YwUserRoomHot> getYwUserRoomHotPage(YwUserRoomHot entity, PageDto page){		return ywUserRoomHotDao.getYwUserRoomHotPage(entity, page);	}	@Override	public void deleteByRoomId(String[] ids) {		ywUserRoomHotDao.deleteByRoomId(ids);	}	@Override	public YwUserRoomHot getYwUserRoomHotByRoomId(String roomId,Integer type) {		return ywUserRoomHotDao.getYwUserRoomHotByRoomId(roomId,type);	}	@Override	public List<Map<String, Object>> listMapRootHot(Integer type,PageDto page) {		return ywUserRoomHotDao.listMapRootHot(type,page);	}	@Override	public void putName(List<Map<String, Object>> listMapRootHot) {		if(CollectionUtils.isNotEmpty(listMapRootHot)){			Set<String> gameIds = new HashSet<String>();			Set<String> userIds = new HashSet<String>();			for (Map<String, Object> map : listMapRootHot) {				if(map.get("gameId") != null){					gameIds.add(map.get("gameId").toString());				}				if(map.get("uid") != null){					userIds.add(map.get("uid").toString());				}			}			Map<String, YwGame> mapGame = ywGameService.getYwGameMapByIds(gameIds.toArray(new String[]{}));			Map<String, YwUser> mapUser = ywUserService.getYwUserMapByIds(userIds.toArray(new String[]{}));			for (Map<String, Object> map : listMapRootHot) {				String gameName = "", nickName = "";				if(map.get("gameId") != null && mapGame.containsKey(map.get("gameId").toString())){					gameName = mapGame.get(map.get("gameId")).getName();				}				if(map.get("uid") != null && mapUser.containsKey(map.get("uid").toString())){					nickName = mapUser.get(map.get("uid").toString()).getNickname();				}				map.put("gameName", gameName);				map.put("nickName", nickName);			}		}	}	@Override	public Map<String, YwUserRoomHot> getMapUserRoomHotByRoomIds(String[] ids) {		return ywUserRoomHotDao.getMapUserRoomHotByRoomIds(ids);	}		@Override	public List<YwUserRoom> setRoomInfo(List<YwUserRoomHot> list) {		List<YwUserRoom> rooms = new ArrayList<YwUserRoom>(); 		if (list.isEmpty()) {			return rooms;		}		Set<String> roomIds = new HashSet<String>();		for (YwUserRoomHot host : list) {			roomIds.add(host.getRoomId());		}		Map<String, YwUserRoom> mapRoom = ywUserRoomService.getYwUserRoomMapByIds(roomIds.toArray(new String[]{}));		for (YwUserRoomHot host : list) {			YwUserRoom room = mapRoom.get(host.getRoomId());			if (room != null) {				host.setRoom(room);				rooms.add(room);			}		}		return rooms;	}    @Override    public List<YwUserRoomHot> getByType(Integer online,Integer type) {        return ywUserRoomHotDao.listRoomByType(online,type);    }	@Override	public Integer getRandRoomIdWithOnline() {		return ywUserRoomHotDao.randRoomInHotWithOnline();	}}