package com.yaowang.lansha.service.impl;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import org.apache.commons.collections.CollectionUtils;import org.springframework.stereotype.Service;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.common.constant.LanshaConstant;import com.yaowang.lansha.dao.YwGameDao;import com.yaowang.lansha.entity.YwGame;import com.yaowang.lansha.entity.YwGameHot;import com.yaowang.lansha.service.YwGameHotService;import com.yaowang.lansha.service.YwGameService;import com.yaowang.util.cache.DefaultCacheManager;import com.yaowang.util.cache.advice.CacheAnnotation;import com.yaowang.util.cache.advice.CacheClearAnnotation;/** * 游戏表  * @author  *  */@Service("ywGameService")public class YwGameServiceImpl extends DefaultCacheManager implements YwGameService{	@Resource	private YwGameDao ywGameDao;	@Resource	private YwGameHotService ywGameHotService;		@Override	@CacheClearAnnotation	public void save(YwGame entity){		entity = ywGameDao.save(entity);	}		@Override	@CacheClearAnnotation	public Integer delete(String[] ids){		//删除推荐记录		ywGameHotService.deleteByGameId(ids);				return ywGameDao.delete(ids);	}		@Override	@CacheClearAnnotation	public Integer update(YwGame entity){		// 游戏下线删除推荐信息		if(LanshaConstant.STATUS_OFFLINE.equals(entity.getStatus())){			ywGameHotService.deleteByGameId(entity.getId());		}		return ywGameDao.update(entity);	}	@Override	@CacheClearAnnotation	public Integer updateStatus(String[] ids, Integer status) {		return ywGameDao.updateStatus(ids, status);	}	@Override	@CacheClearAnnotation	public Integer updateOrderId(List<YwGame> list) {		int count = 0;		Set<String> names = new HashSet<String>();		names.add("orderId");		names.add("id");				if(CollectionUtils.isNotEmpty(list)){			for(YwGame game : list){				count += update(game);			}		}		return count;	}		@Override	public YwGame getYwGameByName(String name){		return ywGameDao.getYwGameByName(name);	}		@Override	@CacheAnnotation	public YwGame getYwGameById(String id){		YwGame game = ywGameDao.getYwGameById(id);		return game;	}		@Override	public Map<String, YwGame> getYwGameMapByIds(String[] ids){		return ywGameDao.getYwGameMapByIds(ids);	}		@Override	@CacheAnnotation	public List<YwGame> getYwGamePage(YwGame game, String[] ids, PageDto page, Date startTime, Date endTime, Integer[] status){		return ywGameDao.getYwGamePage(game, ids, page, startTime, endTime, status);	}		@Override	@CacheAnnotation	public List<YwGame> getYwGameIndexPage(YwGame game, String[] ids, PageDto page, Date startTime, Date endTime, Integer[] status, boolean b){		return ywGameDao.getYwGameIndexPage(game, ids, page, startTime, endTime, status, b);	}		@Override	@CacheAnnotation	public List<YwGame> getYwGamePages(YwGame game, String[] ids, PageDto page, Date startTime, Date endTime, Integer[] status){		return ywGameDao.getYwGamePages(game, ids, page, startTime, endTime, status);	}	@Override	public void setGame(List<YwGame> list, boolean hot) {		if(CollectionUtils.isNotEmpty(list)){			Set<String> ids = new HashSet<String>();			for(YwGame game : list){				ids.add(game.getId());			}						Map<String, YwGameHot> hotmap = null;			if(hot){				hotmap = ywGameHotService.getYwGameHotMapByGameIds(ids.toArray(new String[]{}));			}			for(YwGame game : list){				if(hot && hotmap.containsKey(game.getId())){					game.setIsHotGame(1);				}else{					game.setIsHotGame(0);				}			}					}	}	@Override	@CacheAnnotation	public Integer getYwGameCount() {		return ywGameDao.getYwGameCount();	}	@Override	@CacheAnnotation	public List<Map<String, Object>> getYwGameListMap(YwGame ywGame) {		return ywGameDao.getYwGameListMap(ywGame);	}    @Override    public List<YwGame> getYwGameList(YwGame ywGame,int limit) {        return ywGameDao.getYwGameList(ywGame,limit);    }}