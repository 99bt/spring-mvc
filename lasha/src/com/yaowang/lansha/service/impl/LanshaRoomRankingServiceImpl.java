package com.yaowang.lansha.service.impl;import java.util.ArrayList;import java.util.Calendar;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import com.yaowang.lansha.common.constant.LanshaConstant;import com.yaowang.lansha.dao.*;import com.yaowang.lansha.entity.*;import com.yaowang.lansha.service.*;import com.yaowang.lansha.task.RoomRankingService;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.collections.MapUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Service;import com.yaowang.common.dao.PageDto;import com.yaowang.service.impl.SysOptionServiceImpl;import com.yaowang.util.DateUtils;import com.yaowang.util.cache.CacheUtil;import com.yaowang.util.cache.DefaultCacheManager;import com.yaowang.util.cache.advice.CacheAnnotation;/** * 房间排名 * * @author */@Service("lanshaRoomRankingService")public class LanshaRoomRankingServiceImpl extends DefaultCacheManager implements LanshaRoomRankingService {    @Resource    private LanshaRoomRankingDao lanshaRoomRankingDao;    @Resource    private YwUserRoomDao ywUserRoomDao;    @Resource    private YwUserService ywUserService;    @Resource    private YwUserRoomService ywUserRoomService;    @Resource    private YwGameService ywGameService;    @Resource    private YwUserRoomDayDataService ywUserRoomDayDataService;    @Resource    private RoomRankingService roomRankingService;    @Resource    private LanshaGiftUserDao lanshaGiftUserDao;    @Resource    private YwUserRoomRelationDao ywUserRoomRelationDao;        private static final String KEY_CACHE_RANK = "scorerank";    @Override    public Boolean clear() {        return super.clear();    }    @Override    public LanshaRoomRanking save(LanshaRoomRanking entity) {        return lanshaRoomRankingDao.save(entity);    }    @Override    public Integer delete(String[] ids) {        return lanshaRoomRankingDao.delete(ids);    }    @Override    public Integer update(LanshaRoomRanking entity) {        return lanshaRoomRankingDao.update(entity);    }    @Override    public LanshaRoomRanking getLanshaRoomRankingById(String id) {        return lanshaRoomRankingDao.getLanshaRoomRankingById(id);    }    @Override    public Map<String, LanshaRoomRanking> getLanshaRoomRankingMapByIds(String[] ids) {        return lanshaRoomRankingDao.getLanshaRoomRankingMapByIds(ids);    }    @Override    public List<LanshaRoomRanking> getLanshaRoomRankingList(LanshaRoomRanking entity) {        return lanshaRoomRankingDao.getLanshaRoomRankingList(entity);    }    @Override    public List<LanshaRoomRanking> getLanshaRoomRankingPage(LanshaRoomRanking entity, PageDto page) {        return lanshaRoomRankingDao.getLanshaRoomRankingPage(entity, page);    }    @Override    public List<LanshaRoomRanking> getLanshaRoomRankingPage(LanshaRoomRanking entity, Date startTime, Date endTime, PageDto page) {        return lanshaRoomRankingDao.getLanshaRoomRankingPage(entity, startTime, endTime, page);    }    @Override    @CacheAnnotation    public List<YwUserRoom> getUserRooms(int n) {        List<LanshaRoomRanking> list = getRankings();        //分页        if (n < list.size()) {            list = list.subList(0, n);        }        List<YwUserRoom> rooms = new ArrayList<YwUserRoom>();        if (!list.isEmpty()) {            Set<String> userIds = new HashSet<String>();            for (LanshaRoomRanking ranking : list) {                userIds.add(ranking.getUserId());            }            Map<String, YwUserRoom> roomMap = ywUserRoomDao.getYwUserRoomMapByUserIds(userIds.toArray(new String[]{}));            for (LanshaRoomRanking ranking : list) {                if (roomMap.containsKey(ranking.getUserId())) {                    rooms.add(roomMap.get(ranking.getUserId()));                }            }        }        return rooms;    }    @Override    public Integer getUserRanking(String userId) {        List<LanshaRoomRanking> list = getRankings();        for (int i = 0; i < list.size(); i++) {            LanshaRoomRanking ranking = list.get(i);            if (ranking.getUserId().equals(userId)) {                return i + 1;            }        }        return 0;    }    /**     * 获取积分排名     *     * @return     */    private List<LanshaRoomRanking> getRankings() {        Calendar calendar = Calendar.getInstance();        //从昨天开始算起        calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) - 1);        Date endTime = calendar.getTime();        //近一个月        String day = SysOptionServiceImpl.getValue("LANSHA.ROOM.RANKING.TYPE");        calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH) - Integer.valueOf(day));        Date startTime = calendar.getTime();        List<LanshaRoomRanking> list = lanshaRoomRankingDao.getLanshaRoomRankingListGroupUser(null, DateUtils.getStartDate(startTime), DateUtils.getEndDate(endTime), null);        //积分参数        String option = SysOptionServiceImpl.getValue("LANSHA.ROOM.RANKING");        final String[] rans = option.split(",");        //排序        Collections.sort(list, new Comparator<LanshaRoomRanking>() {            @Override            public int compare(LanshaRoomRanking o1, LanshaRoomRanking o2) {                float n = LanshaRoomRanking.getLanshaRoomRanking(o2, rans) - LanshaRoomRanking.getLanshaRoomRanking(o1, rans);                if (n > 0) {                    return 1;                } else if (n == 0) {                    return 0;                } else {                    return -1;                }            }        });        return list;    }    @Override    public void setRoomName(List<LanshaRoomRanking> list) {        if (CollectionUtils.isNotEmpty(list)) {            Set<String> ids = new HashSet<String>();            for (LanshaRoomRanking room : list) {                ids.add(String.valueOf(room.getRoomIdint()));            }            Map<String, YwUserRoom> map = ywUserRoomService.getYwUserRoomMapByIds(ids.toArray(new String[]{}));            for (LanshaRoomRanking roomRank : list) {                if (map.containsKey(roomRank.getRoomIdint())) {                    YwUserRoom room = map.get(roomRank.getRoomIdint());                    roomRank.setRoomName(room.getName());                }            }        }    }    @Override    public void setUserName(List<LanshaRoomRanking> list) {        if (CollectionUtils.isNotEmpty(list)) {            Set<String> ids = new HashSet<String>();            for (LanshaRoomRanking roomRanking : list) {                ids.add(roomRanking.getUserId());            }            Map<String, YwUser> map = ywUserService.getYwUserMapByIds(ids.toArray(new String[]{}));            for (LanshaRoomRanking roomRanking : list) {                if (map.containsKey(roomRanking.getUserId())) {                    YwUser users = map.get(roomRanking.getUserId());                    roomRanking.setUserName(users.getUsername());                }            }        }    }    @Override    public List<LanshaRoomRanking> getAllLanshaRoomRankingList(LanshaRoomRanking entity, Date startTime, Date endTime, PageDto page) {        List<LanshaRoomRanking> rankRooms = lanshaRoomRankingDao.getLanshaRoomRankingList(entity, startTime, endTime, page);        setUserName(rankRooms);        return rankRooms;    }    @Override    public void setVaildDays(List<LanshaRoomRanking> list, int time) {        if (CollectionUtils.isNotEmpty(list)) {            Map<String, Integer> map = lanshaRoomRankingDao.getCountValidDays(time);            for (LanshaRoomRanking roomRanking : list) {                if (map.containsKey(roomRanking.getRoomIdint() + "")) {                    int vaildDays = map.get(roomRanking.getRoomIdint() + "");                    roomRanking.setVaildDays(vaildDays);                }            }        }    }    @Override    public void setGameName(List<LanshaRoomRanking> list) {        if (CollectionUtils.isNotEmpty(list)) {            Set<String> ids = new HashSet<String>();            for (LanshaRoomRanking room : list) {                ids.add(room.getRoomIdint() + "");            }            Map<String, YwUserRoom> roomMap = ywUserRoomService.getYwUserRoomMapByIdInts(ids.toArray(new String[]{}), null);            // Set<String> keySet = roomMap.keySet();            if (CollectionUtils.isNotEmpty(list)) {                Set<String> gameIds = new HashSet<String>();                for (Map.Entry<String, YwUserRoom> entry : roomMap.entrySet()) {                    gameIds.add(entry.getValue().getGameId());                }                Map<String, YwGame> map = ywGameService.getYwGameMapByIds(gameIds.toArray(new String[]{}));                for (LanshaRoomRanking room : list) {                    if (roomMap.containsKey(room.getRoomIdint() + "")) {                        if (map.containsKey(roomMap.get(room.getRoomIdint() + "").getGameId())) {                            room.setGameName(map.get(roomMap.get(room.getRoomIdint() + "").getGameId()).getName());                        }                    }                }            }        }    }    @Override    public void setSalary(List<LanshaRoomRanking> list) {        if (CollectionUtils.isNotEmpty(list)) {            Set<String> ids = new HashSet<String>();            for (LanshaRoomRanking room : list) {                ids.add(room.getId());            }            Map<String, YwUserRoomDayData> map = ywUserRoomDayDataService.getYwUserRoomDayDataMapByIds(ids.toArray(new String[]{}));            for (LanshaRoomRanking roomRanking : list) {                if (map.containsKey(roomRanking.getId())) {                    YwUserRoomDayData ywUserRoomDayData = map.get(roomRanking.getId());                    roomRanking.setPrice(ywUserRoomDayData.getPayStandard());                    roomRanking.setSalary(ywUserRoomDayData.getSalary());                }            }        }    }    @Override//    @CacheAnnotation    public List<LanshaRoomRanking> getAllLanshaRoomRanking(LanshaRoomRanking entity, Date startTime, Date endTime, PageDto page) {        List<LanshaRoomRanking> rankRooms = lanshaRoomRankingDao.getLanshaRoomRankingListGroupUser(entity, startTime, endTime, page);        //setRoomName(rankRooms);        setUserName(rankRooms);        return rankRooms;    }    @Override    public List<LanshaRoomRanking> getLanshaRoomRankingListSort(Date date) {        return lanshaRoomRankingDao.getLanshaRoomRankingListSort(date);    }    }