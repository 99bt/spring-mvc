package com.yaowang.lansha.service.impl;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Service;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.common.constant.LanshaConstant;import com.yaowang.lansha.dao.YwUserRoomHistoryDao;import com.yaowang.lansha.entity.LanshaUserGiftStock;import com.yaowang.lansha.entity.LanshaUserRecord;import com.yaowang.lansha.entity.YwUser;import com.yaowang.lansha.entity.YwUserRoom;import com.yaowang.lansha.entity.YwUserRoomHistory;import com.yaowang.lansha.service.LanshaAddActivityStockService;import com.yaowang.lansha.service.LanshaUserGiftStockService;import com.yaowang.lansha.service.LanshaUserRecordService;import com.yaowang.lansha.service.YwUserRoomHistoryService;import com.yaowang.lansha.service.YwUserRoomService;import com.yaowang.lansha.service.YwUserService;import com.yaowang.util.asynchronous.AsynchronousService;import com.yaowang.util.asynchronous.ObjectCallable;/** * 房间收藏表  * @author  *  */@Service("ywUserRoomHistoryService")public class YwUserRoomHistoryServiceImpl implements YwUserRoomHistoryService{	@Resource	private YwUserRoomHistoryDao ywUserRoomHistoryDao;	@Resource	private YwUserService ywUserService;	@Resource	private YwUserRoomService ywUserRoomService;	@Resource	private LanshaUserGiftStockService lanshaUserGiftStockService;	@Resource	private LanshaUserRecordService lanshaUserRecordService;	@Resource	private LanshaAddActivityStockService lanshaAddActivityStockService;		@Override	public YwUserRoomHistory save(YwUserRoomHistory entity){		return ywUserRoomHistoryDao.save(entity);	}		@Override	public Integer delete(String[] ids){		return ywUserRoomHistoryDao.delete(ids);	}		@Override	public Integer update(YwUserRoomHistory entity){		return ywUserRoomHistoryDao.update(entity);	}		@Override	public YwUserRoomHistory getYwUserRoomHistoryById(String id){		return ywUserRoomHistoryDao.getYwUserRoomHistoryById(id);	}		@Override	public Map<String, YwUserRoomHistory> getYwUserRoomHistoryMapByIds(String[] ids){		return ywUserRoomHistoryDao.getYwUserRoomHistoryMapByIds(ids);	}		@Override	public List<YwUserRoomHistory> getYwUserRoomHistoryList(YwUserRoomHistory entity){		return ywUserRoomHistoryDao.getYwUserRoomHistoryList(entity);	}		@Override	public List<YwUserRoomHistory> getYwUserRoomHistoryPage(YwUserRoomHistory entity, Integer[] status, PageDto page, Date startTime, Date endTime){		if (page != null && page.isCount()) {			//分页			page.setCount(false);			int count = ywUserRoomHistoryDao.getYwUserRoomHistoryPageCount(entity, status, startTime, endTime);			page.setTotalNum(count);		}		return ywUserRoomHistoryDao.getYwUserRoomHistoryPage(entity, status,  page,  startTime,  endTime);	}	@Override	public void setUserName(List<YwUserRoomHistory> list) {		if (list.isEmpty()) {			return;		}		Set<String> ids = new HashSet<String>();		for (YwUserRoomHistory entity : list) {			ids.add(entity.getUid());		}		//用户名		Map<String, YwUser> map = ywUserService.getYwUserMapByIds(ids.toArray(new String[]{}));		for (YwUserRoomHistory entity : list) {			entity.setGiftName(entity.getGiftName());			if(map.containsKey(entity.getUid())){				YwUser user = map.get(entity.getUid());				entity.setHouseOwner(user.getUsername());			}		}	}	@Override	public void setRoomId(List<YwUserRoomHistory> list) {		if (list.isEmpty()) {			return;		}		Set<String> ids = new HashSet<String>();		for (YwUserRoomHistory entity : list) {			ids.add(entity.getRoomId());		}		//房间id		Map<String, YwUserRoom> map = ywUserRoomService.getYwUserRoomMapByIds(ids.toArray(new String[]{}));		for (YwUserRoomHistory entity : list) {			if(map.containsKey(entity.getRoomId())){				YwUserRoom ywUserRoom = map.get(entity.getRoomId());				entity.setRoomIdInt(ywUserRoom.getIdInt());			}		}	}		@Override	public Integer updateTimeLength(YwUserRoomHistory entity) {		//更新领取蓝鲨币		ywUserRoomHistoryDao.update(entity);		//更新其他房间浏览记录		ywUserRoomHistoryDao.updateTimeLength(entity);		//更新用户观看时长		return ywUserService.updateAddBi(entity.getUid(), 0, entity.getTimeLength());	}	@Override	public Integer saveReceiveGift(YwUserRoomHistory entity,			LanshaUserGiftStock gift, YwUser user) {		//注册限定时间内第一次领取蓝鲨币增加抽奖机会		lanshaAddActivityStockService.addActivityStock(user);		return saveReceive(entity, gift, user);	}		@Override	public Integer saveReceiveFlower(YwUserRoomHistory entity, LanshaUserGiftStock gift, YwUser user){		return saveReceive(entity, gift, user);	}		/**	 * 公共方法	 * @param entity	 * @param gift	 * @param user	 * @return	 * @creationDate. 2016-2-3 下午4:13:13	 */	public Integer saveReceive(final YwUserRoomHistory entity,			final LanshaUserGiftStock gift, YwUser user) {		//更新库存		if(StringUtils.isBlank(gift.getId())){			lanshaUserGiftStockService.save(gift);		}else{			lanshaUserGiftStockService.update(gift);		}				//更新观看历史记录,会同时更新当前用户其他房间浏览记录		int count = updateTimeLength(entity);				//重新加入记录(必须放后面)		YwUserRoomHistory history = new YwUserRoomHistory();		history.setCreateTime(new Date());		history.setHouseOwner(entity.getHouseOwner());		history.setRoomId(entity.getRoomId());		history.setRoomIdInt(entity.getRoomIdInt());		history.setStatus(1);		history.setTimeLength(0);		history.setBi(0);		history.setUid(entity.getUid());		history.setTypeId(entity.getTypeId());		save(history);				AsynchronousService.submit(new ObjectCallable() {			@Override			public Object run() throws Exception {				//收入支出记录				LanshaUserRecord record = new LanshaUserRecord();				record.setObjectType(LanshaConstant.RECORD_OBJECT_TYPE_2);				record.setObjectId(gift.getGiftId());				record.setRemark("定时领取");				record.setType(LanshaConstant.INCOME);				record.setUserId(gift.getUserId());				record.setCreateTime(entity.getCreateTime());				record.setStock(entity.getBi());				lanshaUserRecordService.save(record);				return null;			}		});		return count;	}		@Override	public Integer saveGift(YwUserRoomHistory entity,			LanshaUserGiftStock gift, YwUser user) {		//更新库存		if(StringUtils.isBlank(gift.getId())){			lanshaUserGiftStockService.save(gift);		}else{			lanshaUserGiftStockService.update(gift);		}		//更新观看历史记录,会同时更新当前用户其他房间浏览记录		int count = updateTimeLength(entity);				//重新加入记录(必须放后面)		YwUserRoomHistory history = new YwUserRoomHistory();		history.setCreateTime(new Date());		history.setHouseOwner(entity.getHouseOwner());		history.setRoomId(entity.getRoomId());		history.setRoomIdInt(entity.getRoomIdInt());		history.setStatus(1);		history.setTimeLength(0);		history.setBi(0);		history.setUid(entity.getUid());		history.setTypeId(entity.getTypeId());		save(history);		//收入支出记录		LanshaUserRecord record = new LanshaUserRecord();		record.setObjectType(LanshaConstant.RECORD_OBJECT_TYPE_2);		record.setObjectId(gift.getGiftId());		record.setRemark("系统赠送");		record.setType(LanshaConstant.INCOME);		record.setUserId(gift.getUserId());		record.setCreateTime(entity.getCreateTime());		record.setStock(entity.getBi());		lanshaUserRecordService.save(record);		return count;	}	@Override	public void saveHistory(String roomId, final String userId) {		//添加观看记录		YwUserRoomHistory history = new YwUserRoomHistory();		history.setUid(userId);		history.setRoomId(roomId);		history.setStatus(1);		history.setCreateTime(new Date());		history.setTimeLength(0);		history.setBi(0);				//关联虾米使用的观看历史记录		history.setTypeId(LanshaConstant.GIFT_ID);		ywUserRoomHistoryDao.save(history);		//鲜花高观看记录		history.setId(null);		history.setTypeId(LanshaConstant.GIFT_ID_TWO);		ywUserRoomHistoryDao.save(history);	}	@Override	public List<String> getRoomIdPage(YwUserRoomHistory room, PageDto page) {		return ywUserRoomHistoryDao.getRoomIdPage(room, page);	}	@Override	public Integer getYwUserRoomHistoryCount(YwUserRoomHistory entity, Date startTime, Date endTime) {		return ywUserRoomHistoryDao.getYwUserRoomHistoryCount(entity, startTime, endTime);	}}