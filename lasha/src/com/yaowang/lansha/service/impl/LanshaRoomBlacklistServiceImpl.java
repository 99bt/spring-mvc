package com.yaowang.lansha.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Map;import javax.annotation.Resource;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.dao.LanshaRoomBlacklistDao;import com.yaowang.lansha.entity.LanshaRoomBlacklist;import com.yaowang.lansha.service.LanshaRoomBlacklistService;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Service;/** * 房间禁言用户  * @author  *  */@Service("lanshaRoomBlacklistService")public class LanshaRoomBlacklistServiceImpl implements LanshaRoomBlacklistService{	@Resource	private LanshaRoomBlacklistDao lanshaRoomBlacklistDao;		@Override	public LanshaRoomBlacklist save(LanshaRoomBlacklist entity){		return lanshaRoomBlacklistDao.save(entity);	}		@Override	public Integer delete(String[] ids){		return lanshaRoomBlacklistDao.delete(ids);	}		@Override	public Integer update(LanshaRoomBlacklist entity){		return lanshaRoomBlacklistDao.update(entity);	}		@Override	public LanshaRoomBlacklist getLanshaRoomBlacklistById(String id){		return lanshaRoomBlacklistDao.getLanshaRoomBlacklistById(id);	}		@Override	public Map<String, LanshaRoomBlacklist> getLanshaRoomBlacklistMapByIds(String[] ids){		return lanshaRoomBlacklistDao.getLanshaRoomBlacklistMapByIds(ids);	}		@Override	public List<LanshaRoomBlacklist> getLanshaRoomBlacklistList(LanshaRoomBlacklist entity){		return lanshaRoomBlacklistDao.getLanshaRoomBlacklistList(entity);	}		@Override	public List<LanshaRoomBlacklist> getLanshaRoomBlacklistPage(LanshaRoomBlacklist entity, PageDto page){		return lanshaRoomBlacklistDao.getLanshaRoomBlacklistPage(entity, page);	}	@Override	public boolean getIsBlackByRoomAndUser(String roomId, String userId) {		if(StringUtils.isBlank(roomId) || StringUtils.isBlank(userId)){			return false;		}		LanshaRoomBlacklist query = new LanshaRoomBlacklist();		query.setRoomId(roomId);		query.setUserId(userId);		List<LanshaRoomBlacklist> blackList = lanshaRoomBlacklistDao.getLanshaRoomBlacklistList(query);		if(CollectionUtils.isNotEmpty(blackList)){			Date checkDate = new Date();			for(LanshaRoomBlacklist black : blackList){				 if(checkDate.compareTo(black.getValidTime()) < 0){					 return true;				 } 			}		}		return false;	}	@Override	public List<String> getLanshaRoomBlacklistByUserId(String id) {		List<String> list = new ArrayList<String>();		if(!StringUtils.isBlank(id)){			LanshaRoomBlacklist query = new LanshaRoomBlacklist();			query.setUserId(id);			List<LanshaRoomBlacklist> blackList = lanshaRoomBlacklistDao.getLanshaRoomBlacklistList(query);			if(CollectionUtils.isNotEmpty(blackList)){				for(LanshaRoomBlacklist room : blackList){					list.add(room.getRoomId());				}			}		}		return list;	}	@Override	public Integer deleteByRoomIdAndUserId(String roomId, String userId) {		return lanshaRoomBlacklistDao.deleteByRoomIdAndUserId(roomId,userId);	}	}