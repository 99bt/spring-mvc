package com.yaowang.lansha.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Service;import com.yaowang.common.constant.BaseConstant;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.common.constant.LanshaConstant;import com.yaowang.lansha.dao.YwUserDao;import com.yaowang.lansha.entity.LanshaLiveHistory;import com.yaowang.lansha.entity.LanshaUserBand;import com.yaowang.lansha.entity.LanshaUserGiftStock;import com.yaowang.lansha.entity.YwUser;import com.yaowang.lansha.entity.YwUserRoom;import com.yaowang.lansha.service.LanshaLiveHistoryService;import com.yaowang.lansha.service.LanshaUserBandService;import com.yaowang.lansha.service.LanshaUserGiftStockService;import com.yaowang.lansha.service.YwUserRoomService;import com.yaowang.lansha.service.YwUserService;import com.yaowang.util.filesystem.util.FileSystemUtil;import com.yaowang.util.filesystem.util.FileUtil;import com.yaowang.util.filesystem.util.StorePathUtil;import com.yaowang.util.img.ImageUtils;import com.yaowang.util.openfire.http.UserTool;/** * 用户基本信息表 *  * @author *  */@Service("ywUserService")public class YwUserServiceImpl implements YwUserService {	@Resource	private YwUserDao ywUsersDao;	@Resource	private LanshaUserGiftStockService lanshaUserGiftStockService;	@Resource	private LanshaUserBandService lanshaUserBandService;	@Resource	private YwUserRoomService ywUserRoomService;	@Resource	private LanshaLiveHistoryService lanshaLiveHistoryService;	@Override	public YwUser save(YwUser entity) {		entity = ywUsersDao.save(entity);		if(StringUtils.isBlank(entity.getNickname())){			//昵称			entity.setNickname("shark"+entity.getIdInt());			ywUsersDao.update(entity);		}		return entity;	}	@Override	public Integer delete(String[] ids) {		return ywUsersDao.delete(ids);	}	@Override	public YwUser getYwUserById(String id) {		return ywUsersDao.getYwUserById(id);	}		@Override	public YwUser getYwusersByToken(String token){		return ywUsersDao.getYwusersByToken(token);	}		@Override	public Integer getRecommendUserNumber(YwUser entity){		return ywUsersDao.getRecommendUserNumber(entity);	}	@Override	public Map<String, YwUser> getYwUserMapByIds(String[] ids) {		return ywUsersDao.getYwUserMapByIds(ids);	}	@Override	public List<YwUser> getYwUserListBySearchNote(String searchNote, Integer status, PageDto page) {		return ywUsersDao.getYwUserList(searchNote, status, page);	}	@Override	public List<YwUser> getYwUserList(YwUser users, String[] ids, Integer[] status, PageDto page, Date startTime, Date endTime) {		return ywUsersDao.getYwUserList(users, ids, status, page, startTime, endTime);	}	@Override	public Integer updatePassword(YwUser entity) {		return ywUsersDao.updatePassword(entity);	}	@Override	public YwUser getYwusersByUsername(String username, boolean containDel) {		return ywUsersDao.getYwusersByUsername(username, false);	}	@Override	public YwUser getYwusersByTelphone(String telphone) {		return ywUsersDao.getYwusersByTelphone(telphone);	}	@Override	public List<String> getYwUserAllId(YwUser entity) {		return ywUsersDao.getYwUserAllId(entity);	}	@Override	public Integer update(YwUser entity) {		return ywUsersDao.update(entity);	}	@Override	public YwUser getYwusersByNickname(String nickname) {		return ywUsersDao.getYwusersByNickname(nickname);	}	@Override	public List<YwUser> getYwusersByMobile(YwUser entity, String[] telphones) {		return ywUsersDao.getYwusersByMobile(entity, telphones);	}	@Override	public void updateMobile(String id, String telphone) {		ywUsersDao.updateMobile(id, telphone);	}	@Override	public Integer updateBatchBiAndJingyan(List<YwUser> list) {		return ywUsersDao.updateBatchBiAndJingyan(list);	}	@Override	public List<Map<String, Object>> getListMapAnchor(String name, Integer type, Integer status) {		return ywUsersDao.getListMapAnchor(name, type, status);	}	@Override	public Integer updateForBase(YwUser entity) {		return ywUsersDao.updateForBase(entity);	}	@Override	public Integer updateStatus(String[] ids, Integer status, String remark) {		return ywUsersDao.updateStatus(ids, status, remark);	}	@Override	public Boolean saveHeadpicFile(YwUser user, String uploadPath) throws Exception {		if(StringUtils.isNotBlank(user.getHeadpic()) && user.getHeadpic().matches(".*temp/.*")){			//去掉uploadPath			String headpic = user.getHeadpic();						if(headpic.contains(uploadPath) || headpic.contains(uploadPath.replace("/", "\\"))){				int index = headpic.indexOf(uploadPath);				if(index < 0){					index = headpic.indexOf(uploadPath.replace("/", "\\"));				}				headpic = headpic.substring(index+uploadPath.length());			}			long currentTime = System.currentTimeMillis();						//原图			String ext = FileUtil.getExtensionName(headpic);			String destPath = StorePathUtil.buildPath(user.getId(), "user", "headpic"+currentTime+"_original." + ext).toString();			FileSystemUtil.copyTempFile(headpic, destPath);						//压缩图			ImageUtils.changeSize(FileSystemUtil.getFile(headpic).getAbsolutePath(), -1, -1);			destPath = StorePathUtil.buildPath(user.getId(), "user", "headpic"+currentTime+"." + ext).toString();			FileSystemUtil.copyTempFile(headpic, destPath);			//设置头像地址			user.setHeadpic(destPath);						//小图			ImageUtils.changeSize(FileSystemUtil.getFile(headpic).getAbsolutePath(), 45, 45);			destPath = StorePathUtil.buildPath(user.getId(), "user", "headpic"+currentTime+"_small." + ext).toString();			FileSystemUtil.copyTempFile(headpic, destPath);			//删除原有文件			FileSystemUtil.deleteFile(headpic);						return true;		}else {			return false;		}	}		@Override	public void setYwUserRoomId(List<YwUser> list) {		if (list.isEmpty()) {			return;		}				//自己的房间ID		Set<String> oneselfIds = new HashSet<String>();		for (YwUser entity : list) {			oneselfIds.add(entity.getId());		}		Map<String, YwUserRoom> oneselfIdsMap = ywUserRoomService.getYwUserRoomMapByUserIds(oneselfIds.toArray(new String[]{}));				//推荐人的房间ID		Set<String> referrerIds = new HashSet<String>();		for (YwUser entity : list) {			referrerIds.add(entity.getParentId());		}		Map<String, YwUserRoom> referrerIdsMap = ywUserRoomService.getYwUserRoomMapByUserIds(referrerIds.toArray(new String[]{}));				for (YwUser entity : list) {			//自己			if(oneselfIdsMap.containsKey(entity.getId())){				YwUserRoom ywUserRoom = oneselfIdsMap.get(entity.getId());				entity.setOneselfRoomId(ywUserRoom.getIdInt());				//成功开播时间				LanshaLiveHistory lanshaLiveHistory= lanshaLiveHistoryService.getLanshaLiveHistoryByRoomId(ywUserRoom.getId(), 0);				if(lanshaLiveHistory!=null){					entity.setDatas(lanshaLiveHistory.getStartTime());				}			}			// 推荐房间			if(referrerIdsMap.containsKey(entity.getParentId())){				YwUserRoom ywUserRoom = referrerIdsMap.get(entity.getParentId());				entity.setReferrerRoomId(ywUserRoom.getIdInt());							}			//推荐人			if(StringUtils.isNotBlank(entity.getParentId())){				YwUser tempUser = ywUsersDao.getYwUserById(entity.getParentId());				if(tempUser != null){					entity.setParentIdInt(tempUser.getIdInt());				}			}		}	}				@Override	public Integer updateAddBi(String id, int bi, int time) {		return ywUsersDao.updateAddBi(id, bi, time);	}	@Override	public Integer updateReduceBi(String id, int bi) {		int count = ywUsersDao.updateReduceBi(id, bi);		if(count < 1){			throw new RuntimeException();		}		return count;	}	@Override	public Integer updatePush(String id, String push) {		return ywUsersDao.updatePush(id, push);	}	@Override	public void setGiftStock(List<YwUser> list) {		if(CollectionUtils.isNotEmpty(list)){			Set<String> userIds = new HashSet<String>();			for(YwUser user : list){				userIds.add(user.getId());			}						Map<String, Integer> stockMap = lanshaUserGiftStockService.getStockMapByUserIds(userIds.toArray(new String[]{}));			for(YwUser user : list){				String key = user.getId()+LanshaConstant.GIFT_ID;				if(stockMap.containsKey(key)){					user.setStock(stockMap.get(key));				}			}		}	}	@Override	public void setGiftStock(YwUser user) {		//虾米库存		LanshaUserGiftStock gift = lanshaUserGiftStockService.getByGiftIdAndUserId(LanshaConstant.GIFT_ID, user.getId());		if(gift == null){			user.setStock(0);		}else{			user.setStock(gift.getStock());		}	}	@Override	public void saveUserBand(YwUser ywUsers, LanshaUserBand lanshaUserBand) {		// 保存用户信息		ywUsersDao.save(ywUsers);		// 保存第三方登录信息		lanshaUserBandService.save(lanshaUserBand);	}	@Override	public void updateToken(String id, String token) {		ywUsersDao.updateToken(id, token);	}	@Override	public List<YwUser> getRegiestCount(Date startTime, Date endTime) {		return ywUsersDao.getRegiestCount(startTime, endTime);	}	@Override	public YwUser getYwUserByIdInt(Integer idInt) {		return ywUsersDao.getYwUserByIdInt(idInt);	}	@Override	public Integer updateIsRead(String id) {		return ywUsersDao.updateIsRead(id);	}	@Override	public Integer updateBlackList(String id, String isBlack) {		boolean result = false;		//im		if(BaseConstant.YES_S.equals(isBlack)){			//加入黑名单			result = UserTool.addBlacklist(id);		}else if(BaseConstant.NO_S.equals(isBlack)){			//移除黑名单			result = UserTool.removeBlacklist(id);		}		int count = 0;		if(result){			count = ywUsersDao.updateBlackList(id, isBlack);		}		return count;	}    @Override    public List<String> getYwUserAllIds(String[] ids) {        return ywUsersDao.getYwUserAllIds(ids);    }	@Override	public List<String> isExistedDeviceId(String deviceId) {		if(StringUtils.isBlank(deviceId)){			return new ArrayList<String>(0);		}		return ywUsersDao.getUserIdByDeveice(deviceId);	}}