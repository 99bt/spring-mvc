package com.yaowang.lansha.service.impl;import java.util.ArrayList;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Service;import com.yaowang.common.dao.PageDto;import com.yaowang.entity.AdminUser;import com.yaowang.lansha.dao.ActivityGiftDao;import com.yaowang.lansha.dao.ActivityGiftStockDao;import com.yaowang.lansha.entity.ActivityGift;import com.yaowang.lansha.entity.ActivityGiftStock;import com.yaowang.lansha.entity.ActivityItem;import com.yaowang.lansha.entity.ActivityUser;import com.yaowang.lansha.entity.ActivityUserStock;import com.yaowang.lansha.entity.LanshaUserGiftStock;import com.yaowang.lansha.entity.YwUser;import com.yaowang.lansha.service.ActivityGiftService;import com.yaowang.lansha.service.ActivityGiftStockService;import com.yaowang.lansha.service.ActivityItemService;import com.yaowang.lansha.service.ActivityUserService;import com.yaowang.lansha.service.ActivityUserStockService;import com.yaowang.lansha.service.LanshaUserGiftStockService;import com.yaowang.lansha.service.YwUserService;import com.yaowang.service.AdminUserService;import com.yaowang.service.impl.SysOptionServiceImpl;import com.yaowang.util.mt.MTUtil;/** * 活动礼品库存  * @author  *  */@Service("activityGiftStockService")public class ActivityGiftStockServiceImpl implements ActivityGiftStockService{	@Resource	private ActivityGiftStockDao activityGiftStockDao;	@Resource	private ActivityGiftDao activityGiftDao;	@Resource	private YwUserService ywUserService;	@Resource	private ActivityGiftService activityGiftService;	@Resource	private ActivityItemService activityItemService;	@Resource	private AdminUserService adminUserService;	@Resource	private ActivityUserService activityUserService;	@Resource	private LanshaUserGiftStockService lanshaUserGiftStockService;	@Resource	private ActivityUserStockService activityUserStockService;		@Override	public ActivityGiftStock save(ActivityGiftStock entity){		return activityGiftStockDao.save(entity);	}		@Override	public Integer delete(String[] ids){		return activityGiftStockDao.delete(ids);	}		@Override	public Integer update(ActivityGiftStock entity){		return activityGiftStockDao.update(entity);	}		@Override	public void updateForLottery(ActivityGiftStock entity){		Date now = new Date();		//判断抽奖次数-1，时间间隔是否合法		ActivityUserStock activityUserStock = new ActivityUserStock();		activityUserStock.setUserId(entity.getUserId());		activityUserStock.setItemId(entity.getItemId());		Integer limitTime = Integer.valueOf(SysOptionServiceImpl.getValue("ACTIVITY.LIMIT.TIME"));		if(limitTime==null || limitTime<1) {			throw new RuntimeException("获取间隔时间失败");		}		activityUserStock.setLimitTime(limitTime);		activityUserStock.setStock(-1);		Integer count = activityUserStockService.updateUserLottery(activityUserStock);		if(count<1) {			throw new RuntimeException("抽奖失败");		}				//随机奖品		//1.得到推荐用户数		YwUser user = new YwUser();		user.setId(entity.getUserId());		int userCount = ywUserService.getRecommendUserNumber(user);		//2.得到待抽奖的奖品		ActivityGift activityGift = new ActivityGift();		activityGift.setItemId(entity.getItemId());		activityGift.setStatus("1");		if(userCount<10){ 			activityGift.setLimitNumber(4); //用户推荐人数小于10，设置待抽奖品种类数（前4种价值低的奖品）		}else{			activityGift.setLimitNumber(10);		}		List<ActivityGift> pendingLotteryGift = activityGiftService.getLotteryActivityGiftList(activityGift);		//3.计算奖品的概率		ActivityGift finalPrize = null;		int index = 0;//		if(LanshaConstant.ITEM_ID_TWO.equalsIgnoreCase(entity.getItemId())//				||LanshaConstant.ITEM_ID_THIRD.equalsIgnoreCase(entity.getItemId())){//王者荣耀活动//			Integer  searchResult= activityGiftStockDao.getActivityGiftStockNumber(entity);//			if(searchResult<1){ //				//用户没有中奖纪录第一次抽奖必中2个Q币//				finalPrize = activityGiftService.getActivityGiftById(entity.getDefaultGiftId());//				if(finalPrize==null){//					throw new RuntimeException("没有2个Q币");//				}				//			}else{//				index = calculatePrizeIndex(pendingLotteryGift);//得到奖品索引//			}//		}else{			index = calculatePrizeIndex(pendingLotteryGift);//得到奖品索引//		}		if(index<0||index>(pendingLotteryGift.size()-1)){			throw new RuntimeException("抽奖失败");		}else{			if(finalPrize==null){				finalPrize = pendingLotteryGift.get(index);			}					}		//奖品数-1		entity.setGiftId(finalPrize.getId());		entity.setGiftName(finalPrize.getName());		entity.setType(finalPrize.getType());		entity.setPrizeIndex(finalPrize.getOrderId());		if("3".equalsIgnoreCase(finalPrize.getType())				||"4".equalsIgnoreCase(finalPrize.getType())){			entity.setStatus("0");		}else{			entity.setStatus("1");		}		if("4".equalsIgnoreCase(finalPrize.getType())){			entity.setGiftProperty("1");			ActivityUser receiver = activityUserService.getActivityUserById(entity.getUserId());			entity.setRealName(receiver.getRealname());			entity.setAddress(receiver.getAddress());			entity.setMobile(receiver.getTelphone());		}else{			entity.setGiftProperty("0");		}		entity.setNumber(0);		entity.setStock(-1);		count = activityGiftDao.updateLotteryGiftNumberAndStock(entity);		if(count<1)		{			throw new RuntimeException("抽奖失败");		}		//添加中奖纪录				entity.setCreateTime(now);		activityGiftStockDao.save(entity);		//添加礼包纪录		if("2".equals(finalPrize.getType())){			LanshaUserGiftStock lanshaGift = new LanshaUserGiftStock();			lanshaGift.setUserId(entity.getUserId());			lanshaGift.setGiftId(finalPrize.getObjectId());			lanshaGift.setStock(finalPrize.getBi());			//更新用户礼包库存			count = lanshaUserGiftStockService.updateLottery(lanshaGift);			if(count<1){				//新增用户礼包库存记录				lanshaGift.setCreateTime(now);				lanshaUserGiftStockService.save(lanshaGift);			}		}	}		private int calculatePrizeIndex(List<ActivityGift> pendingLotteryGift) {		//计算待抽奖品总数量		Integer giftSum=0;		for(ActivityGift gift : pendingLotteryGift)		{			giftSum +=gift.getStock();		}		int prizeIndex = 0;		double sumWeight = 0;//计算奖品概率总和		for (ActivityGift item : pendingLotteryGift) {						item.setGiftWeight((item.getStock()*1.0)/giftSum);	//计算待抽奖品中奖概率						sumWeight += item.getGiftWeight(); 		}				double randomNumber = Math.random();//得到随机数			double leftValue = 0;		double rightValue = 0;		int size  = pendingLotteryGift.size();//待抽奖品数		for (int i = 0; i < size; i++) {			rightValue += pendingLotteryGift.get(i).getGiftWeight()/ sumWeight;			if (i == 0) {				leftValue = 0;			} else {				leftValue += pendingLotteryGift.get(i-1).getGiftWeight()/sumWeight;			}			if (randomNumber >= leftValue && randomNumber <= rightValue) {				prizeIndex = i;				break;			}		}		return prizeIndex;			}		@Override	public Integer updateLotteryGiftNumberAndStock(ActivityGiftStock entity){		activityGiftStockDao.save(entity);//添加中奖纪录		entity.setNumber(0);		entity.setStock(-1);		Integer count = activityGiftDao.updateLotteryGiftNumberAndStock(entity);//更新库存信息		if(count<1){			throw new RuntimeException("更新库存失败");		}		return count;	}    @Override    public Integer updateForUserIds(String[] ids, ActivityGiftStock entity) {        return activityGiftStockDao.updateForUserIds(ids,entity);    }    @Override	public Integer updateForDoGift(ActivityGiftStock entity) throws Exception	{		Integer resutl = activityGiftStockDao.updateForDoGift(entity);		if(resutl.intValue()==1&&				"1".equalsIgnoreCase(entity.getStatus())				&&"3".equalsIgnoreCase(entity.getType()))		{			//开始发送短信			if("".equalsIgnoreCase(entity.getMobile()))			{				throw new Exception("手机号为空");			}			MTUtil.sendMt(entity.getRemark(), entity.getMobile());		}else if(resutl.intValue()==1				&&"2".equalsIgnoreCase(entity.getStatus()))		{			//拒绝的礼物返回礼品库 - 2016-01-13 QA-sx 产品确认不放回 			//entity.setNumber(0);			//entity.setStock(1);			//activityGiftDao.updateGiftNumberAndStock(entity);		}		return resutl;	}		@Override	public Integer updateForDoBatchGifts(String[] ids,ActivityGiftStock entity){		activityGiftStockDao.updateForDoBatchGifts(ids,entity);		return null;	}		@Override	public ActivityGiftStock getActivityGiftStockById(String id){		return activityGiftStockDao.getActivityGiftStockById(id);	}		@Override	public Map<String, ActivityGiftStock> getActivityGiftStockMapByIds(String[] ids){		return activityGiftStockDao.getActivityGiftStockMapByIds(ids);	}		@Override	public List<ActivityGiftStock> getIndexActivityGiftStockList(ActivityGiftStock entity){		return activityGiftStockDao.getIndexActivityGiftStockList(entity);	}		@Override	public List<ActivityGiftStock> getActivityGiftStockList(ActivityGiftStock entity){		return activityGiftStockDao.getActivityGiftStockList(entity);	}		@Override	public List<ActivityGiftStock> getActivityGiftStockPage(ActivityGiftStock entity, PageDto page){		return activityGiftStockDao.getActivityGiftStockPage(entity, page);	}		@Override	public List<ActivityGiftStock> getActivityGiftStockPage(ActivityGiftStock entity, Date startTime, Date endTime,PageDto page){		if(StringUtils.isNotBlank(entity.getItemName())){			ActivityItem item = activityItemService.getActivityItemByName(entity.getItemName());			if(item==null){				return new ArrayList<ActivityGiftStock>();			}else{				entity.setItemId(item.getId());			}		}		if(StringUtils.isNotBlank(entity.getGiftName())){//			ActivityGift gift = activityGiftService.getActivityGiftByName(entity.getGiftName());			if(gift==null){				return new ArrayList<ActivityGiftStock>();			}else{				entity.setGiftId(gift.getId());			}		}		if (page != null) {			page.setCount(false);			int count = activityGiftStockDao.getActivityGiftStockNumber(entity, startTime, endTime);			page.setTotalNum(count);		}		return activityGiftStockDao.getActivityGiftStockPage(entity,startTime,endTime, page);	}	@Override	public List<ActivityGiftStock> getActivityGiftStockPages(ActivityGiftStock entity, Date startTime, Date endTime,PageDto page){		return activityGiftStockDao.getActivityGiftStockPages(entity,startTime,endTime, page);	}	@Override	public void setGiftName(List<ActivityGiftStock> list) {		if (list.isEmpty()) {			return;		}		Set<String> ids = new HashSet<String>();		for (ActivityGiftStock entity : list) {			ids.add(entity.getGiftId());		}		//礼物名		Map<String, ActivityGift> map = activityGiftService.getActivityGiftMapByIds(ids.toArray(new String[]{}));		for (ActivityGiftStock entity : list) {			if(map.containsKey(entity.getGiftId())){				ActivityGift activityGift = map.get(entity.getGiftId());				entity.setGiftName(activityGift.getName());			}		}	}	@Override	public void setItemName(List<ActivityGiftStock> list) {		if (list.isEmpty()) {			return;		}		Set<String> ids = new HashSet<String>();		for (ActivityGiftStock entity : list) {			ids.add(entity.getItemId());		}		//活动名		Map<String, ActivityItem> map = activityItemService.getActivityItemMapByIds(ids.toArray(new String[]{}));		for (ActivityGiftStock entity : list) {			if(map.containsKey(entity.getItemId())){				ActivityItem activityItem = map.get(entity.getItemId());				entity.setItemName(activityItem.getName());			}		}	}	@Override	public void setUserName(List<ActivityGiftStock> list) {		if (list.isEmpty()) {			return;		}		Set<String> ids = new HashSet<String>();		for (ActivityGiftStock entity : list) {			ids.add(entity.getUserId());		}		//用户名		Map<String, YwUser> map = ywUserService.getYwUserMapByIds(ids.toArray(new String[]{}));		for (ActivityGiftStock entity : list) {			if(map.containsKey(entity.getUserId())){				YwUser ywUser = map.get(entity.getUserId());				entity.setUserName(ywUser.getUsername());				entity.setNickName(ywUser.getNickname());				//entity.setQq(ywUser.getQq());			}		}	}		@Override	public void setUserInfo(List<ActivityGiftStock> list) {		if (list.isEmpty()) {			return;		}		Set<String> ids = new HashSet<String>();		for (ActivityGiftStock entity : list) {			ids.add(entity.getUserId());		}		//用户名		Map<String, YwUser> map = ywUserService.getYwUserMapByIds(ids.toArray(new String[]{}));		for (ActivityGiftStock entity : list) {			if(map.containsKey(entity.getUserId())){				YwUser ywUser = map.get(entity.getUserId());				entity.setNickName(ywUser.getNickname());				entity.setUserName(ywUser.getUsername());				entity.setHeadpic(ywUser.getHeadpic());			}		}	}		@Override	public void setAdminName(List<ActivityGiftStock> list) {		if (list.isEmpty()) {			return;		}		Set<String> ids = new HashSet<String>();		for (ActivityGiftStock entity : list) {			ids.add(entity.getAdminId());		}		//操作人		Map<String, AdminUser> map = adminUserService.getAdminUserMapByIds(ids.toArray(new String[]{}));		for (ActivityGiftStock entity : list) {			if(map.containsKey(entity.getAdminId())){				AdminUser adminUser = map.get(entity.getAdminId());				entity.setAdminName(adminUser.getUsername());			}		}	}		@Override	public void setActivityUser(List<ActivityGiftStock> list){		if (list.isEmpty()) {			return;		}		Set<String> ids = new HashSet<String>();		for (ActivityGiftStock entity : list) {			ids.add(entity.getUserId());		}				Map<String, ActivityUser> map = activityUserService.getActivityUserMapByIds(ids.toArray(new String[]{}));		for (ActivityGiftStock entity : list) {			if(map.containsKey(entity.getUserId())){				ActivityUser activityUser = map.get(entity.getUserId());				entity.setQq(activityUser.getQq());				entity.setAddress(activityUser.getAddress());				entity.setRealName(activityUser.getRealname());				}		}	}		@Override	public Integer getActivityGiftStockNumber(ActivityGiftStock entity ,Date startTime, Date endTime){		return activityGiftStockDao.getActivityGiftStockNumber(entity, startTime, endTime);	}	/**	 * 	 */	@Override	public Integer updateGiftNumberAndStockAndUser(ActivityGiftStock entity,			ActivityUser activityUser) {		ActivityUser old=activityUserService.getActivityUserById(activityUser.getId());		if(old==null){			activityUserService.save(activityUser, null);//添加活动用户				}else{			old.setQq(activityUser.getQq());//暂时只更新qq，后续需要其他字段自己添加			activityUserService.updateUserInfo(old);		}				activityGiftStockDao.save(entity);//添加中奖纪录		entity.setNumber(0);		entity.setStock(-1);		Integer count = activityGiftDao.updateLotteryGiftNumberAndStock(entity);//更新库存信息		if(count<1){			throw new RuntimeException("更新库存失败");		}		return count;	}	}