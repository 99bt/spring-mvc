package com.yaowang.lansha.service.impl;import java.util.List;import java.util.Map;import javax.annotation.Resource;import com.yaowang.common.dao.PageDto;import com.yaowang.lansha.dao.ActivityUserStockDao;import com.yaowang.lansha.entity.ActivityUserStock;import com.yaowang.lansha.service.ActivityUserStockService;import org.apache.commons.collections.CollectionUtils;import org.springframework.stereotype.Service;/** * 用户抽奖机会  * @author  *  */@Service("activityUserStockService")public class ActivityUserStockServiceImpl implements ActivityUserStockService{	@Resource	private ActivityUserStockDao activityUserStockDao;		@Override	public ActivityUserStock save(ActivityUserStock entity){		return activityUserStockDao.save(entity);	}		@Override	public Integer delete(String[] ids){		return activityUserStockDao.delete(ids);	}		@Override	public Integer update(ActivityUserStock entity){		return activityUserStockDao.update(entity);	}		@Override	public Integer updateUserLottery(ActivityUserStock entity){		return activityUserStockDao.updateUserLottery(entity);	}		@Override	public ActivityUserStock getActivityUserStockById(String id){		return activityUserStockDao.getActivityUserStockById(id);	}		@Override	public Map<String, ActivityUserStock> getActivityUserStockMapByIds(String[] ids){		return activityUserStockDao.getActivityUserStockMapByIds(ids);	}		@Override	public List<ActivityUserStock> getActivityUserStockList(ActivityUserStock entity){		return activityUserStockDao.getActivityUserStockList(entity);	}		@Override	public List<ActivityUserStock> getActivityUserStockPage(ActivityUserStock entity, PageDto page){		return activityUserStockDao.getActivityUserStockPage(entity, page);	}		@Override	public Integer updateUserStock(Integer add, String userId, String itemId) {		return activityUserStockDao.updateUserStock(add, userId, itemId);	}	@Override	public Integer updateManyUserStock(List<ActivityUserStock> list) {		if(CollectionUtils.isEmpty(list)){			return 0;		}		int temp = 0;		for(ActivityUserStock activityUserStock : list){			temp += activityUserStockDao.updateUserStock(activityUserStock.getAdd(), activityUserStock.getUserId(), activityUserStock.getItemId());		}		return temp;	}	}