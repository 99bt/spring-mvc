package com.yaowang.service.impl;import java.util.ArrayList;import java.util.HashSet;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Set;import javax.annotation.Resource;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Service;import com.yaowang.common.action.BasePageAction;import com.yaowang.common.constant.BaseConstant;import com.yaowang.common.dao.PageDto;import com.yaowang.dao.AdminRoleDao;import com.yaowang.entity.AdminRole;import com.yaowang.entity.SysModel;import com.yaowang.service.AdminRoleModelService;import com.yaowang.service.AdminRoleService;import com.yaowang.service.AdminToRoleService;import com.yaowang.service.SysModelService;import com.yaowang.util.cache.CacheUtil;import com.yaowang.util.cache.DefaultCacheManager;/** * 后台角色  * @author  *  */@SuppressWarnings("unchecked")@Service("adminRoleService")public class AdminRoleServiceImpl extends DefaultCacheManager implements AdminRoleService{	@Resource	private AdminRoleDao adminRoleDao;	@Resource	private AdminRoleModelService adminRoleModelService; 	@Resource	private AdminToRoleService adminToRoleService;	@Resource	private SysModelService sysModelService;		@Override	public AdminRole save(AdminRole adminRole){		adminRoleDao.save(adminRole);		clear();		return adminRole;	}		@Override	public Integer delete(String[] ids){		Integer numb = adminRoleDao.delete(ids);		clear();		return numb;	}		@Override	public Integer update(AdminRole adminRole){		Integer numb = adminRoleDao.update(adminRole);		clear();		return numb;	}		@Override	public AdminRole getAdminRoleById(String id){		return adminRoleDao.getAdminRoleById(id);	}		@Override	public Map<String, Object[]> getAdminRoleMapById(String adminId){		Map<String, Object[]> map = new LinkedHashMap<String, Object[]>();		List<String> models = null;		if ("00000000000000000000000000000001".equals(adminId)) {			models = null;		}else {			// 获取角色			List<String> roles = adminToRoleService.getAdminToRoleList(adminId);			if (roles.size() == 0) {				return map;			}			//过滤使用的			List<String> roleIds = getAdminRole("1");						List<String> useRoles = new ArrayList<String>();			for (String roleId : roles) {				if (roleIds.contains(roleId)) {					useRoles.add(roleId);				}			}			if (useRoles.size() == 0) {				return map;			}			//获取角色对应模块			models = adminRoleModelService.getAdminRoleModelList(useRoles.toArray(new String[]{}));			if (models.size() == 0) {				return map;			}		}		//获取模块		List<SysModel> sysModels = sysModelService.getSysModelList(models);		Set<String> urlSet = new HashSet<String>();		//组装数据		//一级菜单		for (SysModel model : sysModels) {			if (BaseConstant.ZERO_GUID.equals(model.getParentId())) {				map.put(model.getId(), new Object[]{model, new ArrayList<SysModel>() });			}		}		//二级菜单		for (SysModel model : sysModels) {			if (!BaseConstant.ZERO_GUID.equals(model.getParentId())) {				if (map.containsKey(model.getParentId())) {					Object[] data = map.get(model.getParentId());					((List<SysModel>)data[1]).add(model);					//加入权限					String url = model.getUrl();					urlSet.add(url);				}			}		}		//保存后台管理员地址		BasePageAction.getSession().put(BaseConstant.ADMIN_MODEL, urlSet);		return map;	}		@Override	public List<AdminRole> getAdminRoleList(){		return (List<AdminRole>)getFormCache(new CacheUtil<List<AdminRole>>() {			@Override			public List<AdminRole> get() {				return adminRoleDao.getAdminRoleList();			}						@Override			public String key() {				return "getAdminRoleList";			}		});	}		@Override	public List<AdminRole> getAdminRolePage(PageDto page){		return adminRoleDao.getAdminRolePage(page);	}		@Override	public List<String> getAdminRole(final String state) {		return (List<String>)getFormCache(new CacheUtil<List<String>>() {			@Override			public List<String> get() {				return adminRoleDao.getAdminRole(state);			}						@Override			public String key() {				return "getAdminRole." + state;			}		});	}		@Override	public String getIndexUrl(String adminId) {		// 获取角色		List<String> roles = adminToRoleService.getAdminToRoleList(adminId);		if (roles.size() == 0) {			return "";		}		//过滤使用的		List<String> roleIds = getAdminRole("1");				List<String> useRoles = new ArrayList<String>();		for (String roleId : roles) {			if (roleIds.contains(roleId)) {				useRoles.add(roleId);			}		}		if (useRoles.size() == 0) {			return "";		}				List<AdminRole> adminRoles = getAdminRoleList();		for (AdminRole role : adminRoles) {			if (useRoles.contains(role.getId()) && StringUtils.isNotEmpty(role.getIndexUrl())) {				return role.getIndexUrl();			}		}		return "";	}	@Override	public List<AdminRole> getAdminRoleByName(String roleName) {		return adminRoleDao.getAdminRoleByName(roleName);	}}